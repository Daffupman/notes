<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.daff.notes.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="io.daff.notes.entity.po.User">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="login_name" jdbcType="VARCHAR" property="loginName" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="CHAR" property="password" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="io.daff.notes.entity.po.User">
    insert into user (id, login_name, name, 
      password)
    values (#{id,jdbcType=BIGINT}, #{loginName,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{password,jdbcType=CHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="io.daff.notes.entity.po.User">
    update user
    set login_name = #{loginName,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=CHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, login_name, name, password
    from user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, login_name, name, password
    from user
  </select>
  <sql id="baseSelectFields">
    id, login_name, name, password
  </sql>
  <insert id="batchInsert" keyProperty="id" useGeneratedKeys="true">
    insert into user(
	  <trim suffixOverrides=",">
		<if test="collection[0].id != null">id,</if>
		<if test="collection[0].loginName != null">login_name,</if>
		<if test="collection[0].name != null">name,</if>
		<if test="collection[0].password != null">password,</if>
	  </trim>
	)
	values
	<foreach collection="list" item="item" separator=",">
	(
	  <trim suffixOverrides=",">
		<if test="item.id != null">#{item.id},</if>
		<if test="item.loginName != null">#{item.loginName},</if>
		<if test="item.name != null">#{item.name},</if>
		<if test="item.password != null">#{item.password},</if>
	  </trim>
	)
	</foreach>
  </insert>
  <delete id="deleteByIds">
    delete from user
	where id
	  <foreach collection="collection" item="item" open="in (" close=")" separator=",">
		#{item}
	  </foreach>
  </delete>
  <select id="select" resultMap="BaseResultMap">
    select <include refid="baseSelectFields"/>
	from user
	<where>
	  <trim suffixOverrides=",">
		<if test="loginName != null and loginName != ''">
		  login_name = #{loginName}
		</if>
		<if test="name != null and name != ''">
		  name = #{name}
		</if>
		<if test="password != null and password != ''">
		  password = #{password}
		</if>
	  </trim>
	</where>
  </select>
  <select id="selectByIds" resultMap="BaseResultMap">
    select	<include refid="baseSelectFields"/>
	from user
	where id
		<foreach collection="collection" item="item" open="in (" close=")" separator=",">
			#{item}
		</foreach>
  </select>
  <select id="selectLikeByForm" resultType="io.daff.notes.entity.po.User">
    select <include refid="baseSelectFields"/>
    from user
    <where>
      <if test="name != null and name != ''">
        and name like concat(#{name}, '%')
      </if>
      <if test="loginName != null and loginName != ''">
        and login_name like concat(#{loginName}, '%')
      </if>
    </where>
  </select>
  <select id="selectByLoginName" resultType="io.daff.notes.entity.po.User">
    select <include refid="baseSelectFields"/>
    from user
    where login_name = #{loginName}
  </select>
  <update id="batchUpdate">
    <foreach collection="list" item="item" separator=",">
			update user
			set
			<trim suffixOverrides=",">
	    <if test="collection[0].loginName != null">login_name = #{item.loginName},</if>
	    <if test="collection[0].name != null">name = #{item.name},</if>
	    <if test="collection[0].password != null">password = #{item.password},</if>
			</trim>
			where id = #{item.id}
		</foreach>
  </update>
</mapper>